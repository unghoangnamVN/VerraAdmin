// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  image         String?
  password      String?
  role          UserRole @default(EMPLOYEE)
  stores        String[]
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model PasswordResetToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Store {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  employees       String[]            
  categories      Category[] @relation("StoreToCategory")
  subcategories   Subcategory []  @relation("StoreToSubcategory")
  products        Product[]  @relation("StoreToProduct")
  orders          Order[]     @relation("StoreToOrder")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

type OrderItems {
  productId String
  productName String
  quantity Int
}

enum Status {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

model Order {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  store       Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems  OrderItems[]
  customerName String
  status      Status
  phone      String    
  email      String
  address    String    
  price      Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}


model Product {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  subcategoryId  String    @db.ObjectId
  subcategory    Subcategory  @relation("SubcategoryToProduct", fields: [subcategoryId], references: [id])
  name        String
  usdPrice    Float
  vndPrice    Float
  position    Int
  image       String
  description String
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([subcategoryId])
}

model Category {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String      @db.ObjectId
  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  name        String
  position    Int
  subcategories Subcategory[] @relation("CategoryToSubCategory")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Subcategory {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String      @db.ObjectId
  store       Store       @relation("StoreToSubcategory", fields: [storeId], references: [id])
  name        String
  description String
  position    Int
  categoryId  String    @db.ObjectId
  category    Category  @relation("CategoryToSubCategory", fields: [categoryId], references: [id])
  products    Product[]   @relation("SubcategoryToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

